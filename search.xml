<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="transform-静态变换"><a href="#transform-静态变换" class="headerlink" title="transform(静态变换)"></a>transform(静态变换)</h1><p><a href="https://zhuanlan.zhihu.com/p/79014873">https://zhuanlan.zhihu.com/p/79014873</a></p><h2 id="static-transform-component-h"><a href="#static-transform-component-h" class="headerlink" title="static_transform_component.h"></a>static_transform_component.h</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modules/transform/static_transform_component.h</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * Copyright 2018 The Apollo Authors. All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> *****************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cyber/component/component.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;modules/transform/proto/static_transform_conf.pb.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;modules/transform/proto/transform.pb.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> apollo &#123;</span><br><span class="line"><span class="keyword">namespace</span> transform &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StaticTransformComponent</span> <span class="keyword">final</span> : <span class="keyword">public</span> apollo::cyber::Component&lt;&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">StaticTransformComponent</span>() = <span class="keyword">default</span>; <span class="comment">// 构造函数</span></span><br><span class="line">  ~<span class="built_in">StaticTransformComponent</span>() = <span class="keyword">default</span>;  <span class="comment">// 析构函数</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">Init</span><span class="params">()</span> <span class="keyword">override</span></span>; <span class="comment">// 初始化函数</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">SendTransforms</span><span class="params">()</span></span>;  <span class="comment">// 发送变换</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">SendTransform</span><span class="params">(<span class="type">const</span> std::vector&lt;TransformStamped&gt;&amp; msgtf)</span></span>; <span class="comment">// 发送变换，参数为数组</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">ParseFromYaml</span><span class="params">(<span class="type">const</span> std::string&amp; file_path, TransformStamped* transform)</span></span>;  <span class="comment">// 从yaml中解析</span></span><br><span class="line"></span><br><span class="line">  apollo::static_transform::Conf conf_;  <span class="comment">// 配置文件</span></span><br><span class="line">  std::shared_ptr&lt;cyber::Writer&lt;TransformStampeds&gt;&gt; writer_;  <span class="comment">// cyber node写句柄</span></span><br><span class="line">  TransformStampeds transform_stampeds_;  <span class="comment">// 变换关系，在proto中定义</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CYBER_REGISTER_COMPONENT</span>(StaticTransformComponent)</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace transform</span></span><br><span class="line">&#125;  <span class="comment">// namespace apollo</span></span><br></pre></td></tr></table></figure><h2 id="static-transform-component-cc"><a href="#static-transform-component-cc" class="headerlink" title="static_transform_component.cc"></a>static_transform_component.cc</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modules/transform/static_transform_component.cc</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment"> * Copyright 2018 The Apollo Authors. All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> *****************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;modules/transform/static_transform_component.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;yaml-cpp/yaml.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;modules/common/adapters/adapter_gflags.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;modules/common/util/message_util.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> apollo &#123;</span><br><span class="line"><span class="keyword">namespace</span> transform &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StaticTransformComponent::Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 读取conf配置</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">GetProtoConfig</span>(&amp;conf_)) &#123;</span><br><span class="line">    AERROR &lt;&lt; <span class="string">&quot;Parse conf file failed, &quot;</span> &lt;&lt; <span class="built_in">ConfigFilePath</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 发布&quot;FLAGS_tf_static_topic&quot;消息</span></span><br><span class="line">  cyber::proto::RoleAttributes attr;</span><br><span class="line">  attr.<span class="built_in">set_channel_name</span>(FLAGS_tf_static_topic);</span><br><span class="line">  attr.<span class="built_in">mutable_qos_profile</span>()-&gt;<span class="built_in">CopyFrom</span>(</span><br><span class="line">      cyber::transport::QosProfileConf::QOS_PROFILE_TF_STATIC);</span><br><span class="line">  <span class="comment">// 注意这里的node_继承至apollo::cyber::Component</span></span><br><span class="line">  writer_ = node_-&gt;<span class="built_in">CreateWriter</span>&lt;TransformStampeds&gt;(attr);</span><br><span class="line">  <span class="built_in">SendTransforms</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaticTransformComponent::SendTransforms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::vector&lt;TransformStamped&gt; tranform_stamped_vec;</span><br><span class="line">  <span class="comment">// 遍历对应的conf文件，实际上对应各种传感器的外参</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; extrinsic_file : conf_.<span class="built_in">extrinsic_file</span>()) &#123;</span><br><span class="line">    <span class="comment">// 判断extrinsic_file(实际上对应各种传感器的外参)是否使能，</span></span><br><span class="line">    <span class="comment">// 如果使能则根据提供的文件路径解析对应的转换关系&quot;ParseFromYaml&quot;，</span></span><br><span class="line">    <span class="comment">// 把转换关系添加到数组&quot;tranform_stamped_vec&quot;中，然后发送。</span></span><br><span class="line">    <span class="keyword">if</span> (extrinsic_file.<span class="built_in">enable</span>()) &#123;</span><br><span class="line">      AINFO &lt;&lt; <span class="string">&quot;Broadcast static transform, frame id [&quot;</span></span><br><span class="line">            &lt;&lt; extrinsic_file.<span class="built_in">frame_id</span>() &lt;&lt; <span class="string">&quot;], child frame id [&quot;</span></span><br><span class="line">            &lt;&lt; extrinsic_file.<span class="built_in">child_frame_id</span>() &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line">      TransformStamped transform;</span><br><span class="line">       <span class="comment">// 解析yaml文件，获取转换，并且添加到数组中。</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">ParseFromYaml</span>(extrinsic_file.<span class="built_in">file_path</span>(), &amp;transform)) &#123;</span><br><span class="line">        tranform_stamped_vec.<span class="built_in">emplace_back</span>(transform);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 发送对应的转换</span></span><br><span class="line">  <span class="built_in">SendTransform</span>(tranform_stamped_vec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何解析yaml文件</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StaticTransformComponent::ParseFromYaml</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> std::string&amp; file_path, TransformStamped* transform_stamped)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!cyber::common::<span class="built_in">PathExists</span>(file_path)) &#123;</span><br><span class="line">    AERROR &lt;&lt; <span class="string">&quot;Extrinsic yaml file does not exist: &quot;</span> &lt;&lt; file_path;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  YAML::Node tf = YAML::<span class="built_in">LoadFile</span>(file_path);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 读取yaml文件中的frame_id和child_frame_id</span></span><br><span class="line">    transform_stamped-&gt;<span class="built_in">mutable_header</span>()-&gt;<span class="built_in">set_frame_id</span>(</span><br><span class="line">        tf[<span class="string">&quot;header&quot;</span>][<span class="string">&quot;frame_id&quot;</span>].<span class="built_in">as</span>&lt;std::string&gt;());</span><br><span class="line">    transform_stamped-&gt;<span class="built_in">set_child_frame_id</span>(</span><br><span class="line">        tf[<span class="string">&quot;child_frame_id&quot;</span>].<span class="built_in">as</span>&lt;std::string&gt;());</span><br><span class="line">    <span class="comment">// translation  位置</span></span><br><span class="line">    <span class="keyword">auto</span> translation =</span><br><span class="line">        transform_stamped-&gt;<span class="built_in">mutable_transform</span>()-&gt;<span class="built_in">mutable_translation</span>();</span><br><span class="line">    translation-&gt;<span class="built_in">set_x</span>(tf[<span class="string">&quot;transform&quot;</span>][<span class="string">&quot;translation&quot;</span>][<span class="string">&quot;x&quot;</span>].<span class="built_in">as</span>&lt;<span class="type">double</span>&gt;());</span><br><span class="line">    translation-&gt;<span class="built_in">set_y</span>(tf[<span class="string">&quot;transform&quot;</span>][<span class="string">&quot;translation&quot;</span>][<span class="string">&quot;y&quot;</span>].<span class="built_in">as</span>&lt;<span class="type">double</span>&gt;());</span><br><span class="line">    translation-&gt;<span class="built_in">set_z</span>(tf[<span class="string">&quot;transform&quot;</span>][<span class="string">&quot;translation&quot;</span>][<span class="string">&quot;z&quot;</span>].<span class="built_in">as</span>&lt;<span class="type">double</span>&gt;());</span><br><span class="line">    <span class="comment">// rotation 角度</span></span><br><span class="line">    <span class="keyword">auto</span> rotation = transform_stamped-&gt;<span class="built_in">mutable_transform</span>()-&gt;<span class="built_in">mutable_rotation</span>();</span><br><span class="line">    rotation-&gt;<span class="built_in">set_qx</span>(tf[<span class="string">&quot;transform&quot;</span>][<span class="string">&quot;rotation&quot;</span>][<span class="string">&quot;x&quot;</span>].<span class="built_in">as</span>&lt;<span class="type">double</span>&gt;());</span><br><span class="line">    rotation-&gt;<span class="built_in">set_qy</span>(tf[<span class="string">&quot;transform&quot;</span>][<span class="string">&quot;rotation&quot;</span>][<span class="string">&quot;y&quot;</span>].<span class="built_in">as</span>&lt;<span class="type">double</span>&gt;());</span><br><span class="line">    rotation-&gt;<span class="built_in">set_qz</span>(tf[<span class="string">&quot;transform&quot;</span>][<span class="string">&quot;rotation&quot;</span>][<span class="string">&quot;z&quot;</span>].<span class="built_in">as</span>&lt;<span class="type">double</span>&gt;());</span><br><span class="line">    rotation-&gt;<span class="built_in">set_qw</span>(tf[<span class="string">&quot;transform&quot;</span>][<span class="string">&quot;rotation&quot;</span>][<span class="string">&quot;w&quot;</span>].<span class="built_in">as</span>&lt;<span class="type">double</span>&gt;());</span><br><span class="line">  &#125; <span class="built_in">catch</span> (...) &#123;</span><br><span class="line">    AERROR &lt;&lt; <span class="string">&quot;Extrinsic yaml file parse failed: &quot;</span> &lt;&lt; file_path;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何发送转换关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StaticTransformComponent::SendTransform</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> std::vector&lt;TransformStamped&gt;&amp; msgtf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> it_in = msgtf.<span class="built_in">begin</span>(); it_in != msgtf.<span class="built_in">end</span>(); ++it_in) &#123;</span><br><span class="line">    <span class="type">bool</span> match_found = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 如果child_frame_id重复，那么则覆盖对应的配置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; it_msg : *transform_stampeds_.<span class="built_in">mutable_transforms</span>()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (it_in-&gt;<span class="built_in">child_frame_id</span>() == it_msg.<span class="built_in">child_frame_id</span>()) &#123;</span><br><span class="line">        it_msg = *it_in;</span><br><span class="line">        match_found = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!match_found) &#123;</span><br><span class="line">      <span class="comment">// 获取增加的指针地址，并且赋值</span></span><br><span class="line">      *transform_stampeds_.<span class="built_in">add_transforms</span>() = *it_in;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  common::util::<span class="built_in">FillHeader</span>(node_-&gt;<span class="built_in">Name</span>(), &amp;transform_stampeds_);</span><br><span class="line">  writer_-&gt;<span class="built_in">Write</span>(transform_stampeds_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace transform</span></span><br><span class="line">&#125;  <span class="comment">// namespace apollo</span></span><br></pre></td></tr></table></figure><p><a href="https://pvetie1n4z.feishu.cn/docx/doxcnuZ6b1lmlAi7nsF8AocWSEd">https://pvetie1n4z.feishu.cn/docx/doxcnuZ6b1lmlAi7nsF8AocWSEd</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/16107.html"/>
      <url>/post/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
